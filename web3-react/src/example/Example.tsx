import './Example.css'

import { useWeb3React } from '@web3-react/core'
import axios from 'axios'
import React, { useEffect, useState } from 'react'
import { ErrorBoundary, FallbackProps } from 'react-error-boundary'

import { ConnectionOptions } from '../libs/components/ConnectionOptions'
import { ConnectionType, switchNetwork } from '../libs/connections'
import { CHAIN_INFO, INPUT_CHAIN_URL } from '../libs/constants'

const FallbackComponent = ({ error }: FallbackProps) => {
  return (
    <div>
      <h1>An error occurred: {error.message}</h1>
      <p>Please reload the application</p>
    </div>
  )
}
// Listen for new blocks and update the wallet
const useOnBlockUpdated = (callback: (blockNumber: number) => void) => {
  const { provider } = useWeb3React()
  useEffect(() => {
    if (!provider) {
      return
    }
    const subscription = provider.on('block', callback)
    return () => {
      subscription.removeAllListeners()
    }
  })
}

const API_KEY = 'dWNFgYELVh399N2C1UvYy4ORmJnjHwEL3BqAOOf4'
const Example = () => {
  const { chainId, account, isActive, provider } = useWeb3React()
  const [blockNumber, setBlockNumber] = useState<number>(0)
  const [connectionType, setConnectionType] = useState<ConnectionType | null>(null)
  const [orders, setOrders] = useState<any[]>([])

  // Listen for new blocks and update the wallet
  useOnBlockUpdated(async (blockNumber: number) => {
    setBlockNumber(blockNumber)
    const ordersResponse = await axios.get(
      'https://gz5f7oqmuj.execute-api.us-east-2.amazonaws.com/prod/trade/orders?offerer=0xDb8844D4cc6d6Daed718828edc1C30DFd412745F&limit=2',
      {
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': API_KEY,
        },
      }
    )
    setOrders(ordersResponse.data.orders)
  })

  // const onActionSendTx = async () => {
  //   if (!provider) return
  //   console.log('onAction')
  //   console.log(provider.blockNumber)
  //   const data =
  //     '0x24856bce7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006600000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000008322b84904ec0f21de280c2711e56ca8d49cb33300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000062f832261e769457d1d700cfea3bae6a43ccec2000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000063fc9e460000000000000000000000000000000000000000000000000000000063fdefc60000000000000000000000000000000000000000000000000000000000000000360c6ebe000000000000000000000000000000000000000059739e39ecb0317f0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000dfb3f316da3d29a134f2d83f529c068a735de3c500000000000000000000000000000000000000000000000000000000000005bb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101ebdc334300000000000000000000000000000000000000000000000000000101ebdc3343000000000000000000000000000062f832261e769457d1d700cfea3bae6a43ccec20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164859cc08000000000000000000000000000000000000000000000000000000164859cc08000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000133800a660800000000000000000000000000000000000000000000000000000133800a66080000000000000000000000000011abd336d1a59671853cd6da1fb4527d79ba8f56000000000000000000000000000000000000000000000000000000000000004154f66d6e75930fd897f302713c043d049eb7d844509334c586cb4a3491447fe015c47e494a8ecfcbe5e03977e781dad11fb530a8378e20dcebb3734e553fa9801c
  //   const tx = {
  //     data,
  //     to: '0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B',
  //     value: '4900000000000000',
  //   }

  //   const gasLimit = await provider.estimateGas(tx)
  //   await provider.getSigner().sendTransaction({ ...tx, gasLimit })
  //   console.log('gas', gasLimit)
  // }

  const onPerformAction = async () => {
    if (!provider) return
    const signer = provider.getSigner()

    const approvalResponse = await axios.post(
      'https://gz5f7oqmuj.execute-api.us-east-2.amazonaws.com/prod/check_approval',
      {
        walletAddress: '0xDb8844D4cc6d6Daed718828edc1C30DFd412745F',
        amount: '100000000000',
        token: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': API_KEY,
        },
      }
    )

    if (approvalResponse.data.approval) {
      await signer.sendTransaction(approvalResponse.data.approval)
    }

    const quoteResponse = await axios.post(
      'https://gz5f7oqmuj.execute-api.us-east-2.amazonaws.com/prod/trade/quote',
      {
        type: 'EXACT_INPUT',
        tokenInChainId: 1,
        tokenOutChainId: 1,
        tokenIn: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',
        tokenOut: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
        amount: '20000000',
        offerer: '0xDb8844D4cc6d6Daed718828edc1C30DFd412745F',
        forceGassless: true,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': API_KEY,
        },
      }
    )

    const { quote, permitData } = quoteResponse.data
    const signature = await signer._signTypedData(permitData.domain, permitData.types, permitData.values)

    let postOrderResponse
    try {
      postOrderResponse = await axios.post(
        'https://gz5f7oqmuj.execute-api.us-east-2.amazonaws.com/prod/trade/order',
        {
          signature,
          quote,
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': API_KEY,
          },
        }
      )
    } catch (e) {
      console.log(e)
    }

    console.log(postOrderResponse?.data)
  }

  return (
    <div className="App">
      <ErrorBoundary FallbackComponent={FallbackComponent}>
        {INPUT_CHAIN_URL === '' && <h2 className="error">Please set your RPC URL in config.ts</h2>}
        <h3>{`Block Number: ${blockNumber + 1}`}</h3>
        <ConnectionOptions
          activeConnectionType={connectionType}
          isConnectionActive={isActive}
          onActivate={setConnectionType}
          onDeactivate={setConnectionType}
        />
        <h3>{`ChainId: ${chainId}`}</h3>
        <h3>{`Connected Account: ${account}`}</h3>
        {Object.keys(CHAIN_INFO).map((chainId) => (
          <div key={chainId}>
            <button onClick={() => switchNetwork(parseInt(chainId), connectionType)}>
              {`Switch to ${CHAIN_INFO[chainId].label}`}
            </button>
          </div>
        ))}
        {orders.map((order) => (
          <div key={order.orderId}>
            <p>{`Order created at: ${order.createdAt}`}</p>
          </div>
        ))}
        <button onClick={onPerformAction}>Do Action</button>
      </ErrorBoundary>
    </div>
  )
}

// eslint-disable-next-line import/no-default-export
export default Example
